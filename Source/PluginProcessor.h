/*
  ==============================================================================

    This file contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>

using namespace std;

#define N 101

//==============================================================================
/**
*/
class OldguitaristAudioProcessor  : public juce::AudioProcessor
                            #if JucePlugin_Enable_ARA
                             , public juce::AudioProcessorARAExtension
                            #endif
{
public:
    //==============================================================================
    OldguitaristAudioProcessor();
    ~OldguitaristAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

   #ifndef JucePlugin_PreferredChannelConfigurations
    bool isBusesLayoutSupported (const BusesLayout& layouts) const override;
   #endif

    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    //==============================================================================
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const juce::String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool isMidiEffect() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const juce::String getProgramName (int index) override;
    void changeProgramName (int index, const juce::String& newName) override;

    //==============================================================================
    void getStateInformation (juce::MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    AudioProcessorValueTreeState treeState;

private:

    dsp::ProcessSpec spec;
    dsp::Convolution convolution;

    float sampleRate;

    float length;
    float gamma;
    float stiffness;

    float dx;
    float dt;

    float initialState[N]{
        0.0, 0.01449275, 0.02898551, 0.04347826, 0.05797101, 0.07246377, 0.08695652, 0.10144928, 0.11594203, 0.13043478,
        0.14492754, 0.15942029, 0.17391304, 0.1884058, 0.20289855, 0.2173913, 0.23188406, 0.24637681, 0.26086957, 0.27536232,
        0.28985507, 0.30434783, 0.31884058, 0.33333333, 0.34782609, 0.36231884, 0.37681159, 0.39130435, 0.4057971, 0.42028986,
        0.43478261, 0.44927536, 0.46376812, 0.47826087, 0.49275362, 0.50724638, 0.52173913, 0.53623188, 0.55072464, 0.56521739,
        0.57971014, 0.5942029, 0.60869565, 0.62318841, 0.63768116, 0.65217391, 0.66666667, 0.68115942, 0.69565217, 0.71014493,
        0.72463768, 0.73913043, 0.75362319, 0.76811594, 0.7826087, 0.79710145, 0.8115942, 0.82608696, 0.84057971, 0.85507246,
        0.86956522, 0.88405797, 0.89855072, 0.91304348, 0.92753623, 0.94202899, 0.95652174, 0.97101449, 0.98550725, 1.0,
        1.0, 0.96666667, 0.93333333, 0.9, 0.86666667, 0.83333333, 0.8, 0.76666667, 0.73333333, 0.7,
        0.66666667, 0.63333333, 0.6, 0.56666667, 0.53333333, 0.5, 0.46666667, 0.43333333, 0.4, 0.36666667,
        0.33333333, 0.3, 0.26666667, 0.23333333, 0.2, 0.16666667, 0.13333333, 0.1, 0.06666667, 0.03333333,
        0.0
    };

    float previousState[N] = {
        0.0, 0.01449275, 0.02898551, 0.04347826, 0.05797101, 0.07246377, 0.08695652, 0.10144928, 0.11594203, 0.13043478,
        0.14492754, 0.15942029, 0.17391304, 0.1884058, 0.20289855, 0.2173913, 0.23188406, 0.24637681, 0.26086957, 0.27536232,
        0.28985507, 0.30434783, 0.31884058, 0.33333333, 0.34782609, 0.36231884, 0.37681159, 0.39130435, 0.4057971, 0.42028986,
        0.43478261, 0.44927536, 0.46376812, 0.47826087, 0.49275362, 0.50724638, 0.52173913, 0.53623188, 0.55072464, 0.56521739,
        0.57971014, 0.5942029, 0.60869565, 0.62318841, 0.63768116, 0.65217391, 0.66666667, 0.68115942, 0.69565217, 0.71014493,
        0.72463768, 0.73913043, 0.75362319, 0.76811594, 0.7826087, 0.79710145, 0.8115942, 0.82608696, 0.84057971, 0.85507246,
        0.86956522, 0.88405797, 0.89855072, 0.91304348, 0.92753623, 0.94202899, 0.95652174, 0.97101449, 0.98550725, 1.0,
        1.0, 0.96666667, 0.93333333, 0.9, 0.86666667, 0.83333333, 0.8, 0.76666667, 0.73333333, 0.7,
        0.66666667, 0.63333333, 0.6, 0.56666667, 0.53333333, 0.5, 0.46666667, 0.43333333, 0.4, 0.36666667,
        0.33333333, 0.3, 0.26666667, 0.23333333, 0.2, 0.16666667, 0.13333333, 0.1, 0.06666667, 0.03333333,
        0.0
    };
    float currentState[N] = {
        0.0, 0.01449275, 0.02898551, 0.04347826, 0.05797101, 0.07246377, 0.08695652, 0.10144928, 0.11594203, 0.13043478,
        0.14492754, 0.15942029, 0.17391304, 0.1884058, 0.20289855, 0.2173913, 0.23188406, 0.24637681, 0.26086957, 0.27536232,
        0.28985507, 0.30434783, 0.31884058, 0.33333333, 0.34782609, 0.36231884, 0.37681159, 0.39130435, 0.4057971, 0.42028986,
        0.43478261, 0.44927536, 0.46376812, 0.47826087, 0.49275362, 0.50724638, 0.52173913, 0.53623188, 0.55072464, 0.56521739,
        0.57971014, 0.5942029, 0.60869565, 0.62318841, 0.63768116, 0.65217391, 0.66666667, 0.68115942, 0.69565217, 0.71014493,
        0.72463768, 0.73913043, 0.75362319, 0.76811594, 0.7826087, 0.79710145, 0.8115942, 0.82608696, 0.84057971, 0.85507246,
        0.86956522, 0.88405797, 0.89855072, 0.91304348, 0.92753623, 0.94202899, 0.95652174, 0.97101449, 0.98550725, 1.0,
        1.0, 0.96666667, 0.93333333, 0.9, 0.86666667, 0.83333333, 0.8, 0.76666667, 0.73333333, 0.7,
        0.66666667, 0.63333333, 0.6, 0.56666667, 0.53333333, 0.5, 0.46666667, 0.43333333, 0.4, 0.36666667,
        0.33333333, 0.3, 0.26666667, 0.23333333, 0.2, 0.16666667, 0.13333333, 0.1, 0.06666667, 0.03333333,
        0.0
    };

    float nextState[N];

    float amplitude;

    float frequency{ 80.0 };
    float c{ 308 };

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (OldguitaristAudioProcessor)
};
